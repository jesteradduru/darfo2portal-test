{"version":3,"file":"static/js/649.a804eeb5.chunk.js","mappings":"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","sources":["Pages/DTS/ReviewActionTaken/ReviewActionTaken.jsx"],"sourcesContent":["//Review Action Taken Page\r\nimport React from \"react\";\r\nimport { useState } from \"react\";\r\nimport { useEffect } from \"react\";\r\nimport { BsChevronRight } from \"react-icons/bs\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { Container, Form, FormGroup, Input, Label } from \"reactstrap\";\r\nimport {\r\n  getActionTaken,\r\n  reviewActionTaken,\r\n} from \"../../../features/dts/action/actionSlice\";\r\nimport { taskComplete } from \"../../../features/dts/tasks/tasksSlice\";\r\nimport {\r\n  AttachmentsContainer,\r\n  BackButton,\r\n  ImageGallery,\r\n  InputFileImage,\r\n} from \"../../../Layouts/DTS\";\r\nimport { Confirmation, ContentLoader, IconatedButton } from \"../../../Layouts/Portal\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport moment from \"moment\";\r\nimport { getAttachments, getScanned } from \"../../../Helpers/dts_helpers\";\r\n\r\nconst ReviewActionTaken = () => {\r\n  const { com_id, inbox_id } = useParams();\r\n  const dispatch = useDispatch();\r\n  const { reviewActionTakenData, isLoading, errorMessage, actor } = useSelector(\r\n    (state) => state.action\r\n  );\r\n  const [isReject, setReject] = useState(false);\r\n  const navigate = useNavigate();\r\n  const [confirmationOpen, setConfirmation] = useState(false);\r\n  const {user} = useSelector(state => state.user)\r\n\r\n  const onApproveReject = (e) => {\r\n    setReject(e.target.value === \"revise\");\r\n  };\r\n\r\n  const onConfirmSubmit = (e)  => {\r\n    e.preventDefault()\r\n    setConfirmation(!confirmationOpen);\r\n  }\r\n\r\n  const onFormSubmit = async () => {\r\n    \r\n\r\n    const formData = new FormData(document.getElementById('review_action_taken_form'));\r\n    formData.set(\"act_id\", reviewActionTakenData.act_id);\r\n    formData.set(\"com_id\", reviewActionTakenData.com_id);\r\n    formData.set(\"inbox_id\", inbox_id);\r\n    const formDataObject = {};\r\n\r\n    formData.forEach((value, key) => {\r\n      formDataObject[key] = value;\r\n    });\r\n\r\n    const actionTaken = await dispatch(reviewActionTaken(formData));\r\n\r\n    if (actionTaken.payload.act_id) {\r\n      await dispatch(taskComplete(inbox_id));\r\n      navigate(\"/dts/managementOfCommunications/inbox\");\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    dispatch(getActionTaken({ com_id, inbox_id }));\r\n  }, [dispatch]); \r\n\r\n  return (\r\n    <Container className=\"w-75 mt-3\">\r\n      <Confirmation isOpen={confirmationOpen} toggleModal={() => setConfirmation(!confirmationOpen)} onProceed={onFormSubmit} />\r\n      <ContentLoader isLoading={isLoading} errorMessage={errorMessage}>\r\n        <Form onSubmit={onConfirmSubmit} id='review_action_taken_form'>\r\n          <h4>Review Action Taken</h4>\r\n          <hr />\r\n          <FormGroup>\r\n            <Label for=\"action_taken\">\r\n              Description of action taken<span className=\"text-danger\"> *</span>\r\n            </Label>\r\n            <Input\r\n              defaultValue={reviewActionTakenData.act_taken}\r\n              type=\"textarea\"\r\n              rows=\"6\"\r\n              id=\"action_taken\"\r\n              required\r\n              name=\"action_taken\"\r\n            />\r\n          </FormGroup>\r\n          <i className=\"text-success text-end d-block\">{`Acted by ${actor.emp_firstname} ${actor.emp_lastname} - ${actor.office_code}`}</i>\r\n          <i className=\"text-success text-end d-block\">{`${moment(\r\n            reviewActionTakenData.act_date\r\n          ).fromNow()} - ${moment(reviewActionTakenData.act_date).format(\r\n            \"DD/MM/YYYY hh:mm A\"\r\n          )}`}</i>\r\n           <ImageGallery\r\n              title={\"Scanned Copies\"}\r\n              images={reviewActionTakenData.scanned && getScanned(reviewActionTakenData.scanned)}\r\n            />\r\n            <br />\r\n            <AttachmentsContainer\r\n              attachments={reviewActionTakenData.scanned && getAttachments(reviewActionTakenData.attachments)}\r\n            />\r\n          <FormGroup>\r\n            <Label for=\"approve_reject\">\r\n              Approve/Reject\r\n            </Label>\r\n            <Input\r\n              id=\"approve_reject\"\r\n              name=\"approve_reject\"\r\n              type=\"select\"\r\n              required\r\n              onChange={onApproveReject}\r\n            >\r\n              <option value=\"approve\">Approve</option>\r\n              <option value=\"revise\">Revise</option>\r\n            </Input>\r\n          </FormGroup>\r\n\r\n          {(!isReject && user.role_name === 'Process-level Reviewer') && (\r\n            <InputFileImage label='Communication signed by RED' />\r\n          )}\r\n\r\n          {isReject && (\r\n            <FormGroup>\r\n              <Label className=\"lead\" for=\"reject_remarks\">\r\n                Remarks\r\n              </Label>\r\n              <Input\r\n                type=\"textarea\"\r\n                id=\"reject_remarks\"\r\n                required\r\n                name=\"reject_remarks\"\r\n              />\r\n            </FormGroup>\r\n          )}\r\n\r\n          <div className=\"d-flex justify-content-between\">\r\n            <BackButton />\r\n            <IconatedButton\r\n              size=\"md\"\r\n              color=\"primary\"\r\n              name=\"Submit\"\r\n              type=\"submit\"\r\n              icon={<BsChevronRight />}\r\n            />\r\n          </div>\r\n        </Form>\r\n      </ContentLoader>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default ReviewActionTaken;\r\n"],"names":["useParams","com_id","inbox_id","dispatch","useDispatch","useSelector","state","action","reviewActionTakenData","isLoading","errorMessage","actor","useState","isReject","setReject","navigate","useNavigate","confirmationOpen","setConfirmation","user","onFormSubmit","formData","FormData","document","getElementById","set","act_id","formDataObject","forEach","value","key","reviewActionTaken","payload","taskComplete","useEffect","getActionTaken","className","isOpen","toggleModal","onProceed","onSubmit","e","preventDefault","id","for","defaultValue","act_taken","type","rows","required","name","emp_firstname","emp_lastname","office_code","moment","act_date","fromNow","format","title","images","scanned","getScanned","attachments","getAttachments","onChange","target","role_name","label","size","color","icon"],"sourceRoot":""}